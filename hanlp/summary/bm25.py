import math
from typing import List, Dict


class BM25:
    def __init__(self, docs: List[List[str]]):
        self.k1 = 1.5
        self.b = 0.75
        # 拆分为[句子[单词]]形式的文档
        self.docs = docs
        # 文档句子的个数
        self.D = len(docs)
        # 文档句子的平均长度
        self.avgdl = 0
        for sentence in self.docs:
            self.avgdl += len(sentence)
        self.avgdl /= self.D
        # 文档中每个句子中的每个词与词频
        self.f: List[Dict[str, int]] = [{} for _ in range(self.D)]
        # 文档中全部词语与出现在几个句子中
        self.df: Dict[str, int] = dict()
        # IDF
        self.idf: Dict[str, float] = dict()
        self.init()

    def init(self):
        index = 0
        for sentence in self.docs:
            tf = dict()
            for word in sentence:
                freq = tf.get(word, 0)
                freq += 1
                tf[word] = freq
            # 记录每个句子中每个词汇的频数
            self.f[index] = tf
            for word in tf.keys():
                freq = self.df.get(word, 0)
                freq += 1
                # 计算每个词的词频，用于后面计算IDF
                self.df[word] = freq
            index += 1

        assert self.f == [
            {'水利部': 1, '水资源': 1, '司': 1, '司长': 1, '陈明忠': 1, '9月': 1, '国务院': 1, '新闻办': 1, '举行': 1,
             '新闻': 1, '发布会': 1, '透露': 1},
            {'刚刚': 1, '完成': 1, '水资源': 1, '管理': 1, '制度': 1, '考核': 1},
            {'部分': 1, '省': 1, '接近': 1, '红线': 1, '指标': 1},
            {'部分': 1, '省': 1, '超过': 1, '红线': 1, '指标': 1},
            {'超过': 1, '红线': 1, '地方': 1},
            {'陈明忠': 1, '表示': 1},
            {'取': 1, '用水': 1, '项目': 1, '进行': 1, '区域': 1, '限': 1},
            {'严格': 1, '进行': 1, '水资源': 1, '论证': 1, '取水': 1, '许可': 1, '批准': 1}
        ]
        assert self.df == {'水利部': 1, '水资源': 3, '司': 1, '司长': 1, '陈明忠': 2, '9月': 1, '国务院': 1,
                           '新闻办': 1, '举行': 1,
                           '新闻': 1, '发布会': 1, '透露': 1, '刚刚': 1, '完成': 1, '管理': 1, '制度': 1, '考核': 1,
                           '部分': 2, '省': 2,
                           '接近': 1, '红线': 3, '指标': 2, '超过': 2, '地方': 1, '表示': 1, '取': 1, '用水': 1,
                           '项目': 1, '进行': 2,
                           '区域': 1, '限': 1, '严格': 1, '论证': 1, '取水': 1, '许可': 1, '批准': 1}

        for word, freq in self.df.items():
            # 计算IDF
            self.idf[word] = math.log(self.D - freq + 0.5) - math.log(freq + 0.5)
        assert self.idf == {'水利部': 1.6094379124341003, '水资源': 0.4519851237430572, '司': 1.6094379124341003,
                            '司长': 1.6094379124341003, '陈明忠': 0.9555114450274362, '9月': 1.6094379124341003,
                            '国务院': 1.6094379124341003, '新闻办': 1.6094379124341003, '举行': 1.6094379124341003,
                            '新闻': 1.6094379124341003, '发布会': 1.6094379124341003, '透露': 1.6094379124341003,
                            '刚刚': 1.6094379124341003, '完成': 1.6094379124341003, '管理': 1.6094379124341003,
                            '制度': 1.6094379124341003, '考核': 1.6094379124341003, '部分': 0.9555114450274362,
                            '省': 0.9555114450274362, '接近': 1.6094379124341003, '红线': 0.4519851237430572,
                            '指标': 0.9555114450274362, '超过': 0.9555114450274362, '地方': 1.6094379124341003,
                            '表示': 1.6094379124341003, '取': 1.6094379124341003, '用水': 1.6094379124341003,
                            '项目': 1.6094379124341003, '进行': 0.9555114450274362, '区域': 1.6094379124341003,
                            '限': 1.6094379124341003, '严格': 1.6094379124341003, '论证': 1.6094379124341003,
                            '取水': 1.6094379124341003, '许可': 1.6094379124341003, '批准': 1.6094379124341003}

    def sim(self, sentence: List[str], index: int) -> float:
        score = 0
        for word in sentence:
            if word not in self.f[index]:
                continue
            # 被检索文档包含词汇的长度
            d = len(self.docs[index])
            tf = self.f[index][word]
            # BM25核心公式
            score += (self.idf[word] * tf * (self.k1 + 1) / (tf + self.k1 * (1 - self.b + self.b * d / self.avgdl)))
        return score

    def sim_all(self, sentence: List[str]) -> List[float]:
        scores = [0.0] * self.D
        # 计算sentence与docs中每个文档的相似度
        for i in range(self.D):
            scores[i] = self.sim(sentence, i)
        # sentence = ['水利部', '水资源', '司', '司长', '陈明忠', '9月', '国务院', '新闻办', '举行', '新闻', '发布会', '透露']
        # scores = [11.753084407052972, 0.44331163522773204, 0, 0, 0, 1.352416199115756, 0, 0.4117092216273392]
        return scores
